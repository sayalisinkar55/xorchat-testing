package utilities;

import java.io.File;

import java.io.IOException;

import java.util.Hashtable;

import jxl.Sheet;

import jxl.Workbook;

import jxl.read.biff.BiffException;


public class ExcelReader 
{
    
	

	 
	9
	/**
	10
	 * This is a utility class created to read the excel test data file before performing the test steps.
	11
	 * This class loads the excel file and
	12
	 * reads its column entries.
	13
	 *
	14
	 */
	15
	 
	16
	public class ExcelReader {
	17
	                /**
	18
	                 * The worksheet to read in Excel file
	19
	                 */
	20
	 
	21
	                public static Sheet wrksheet;
	22
	                /**
	23
	                 * The Excel file to read
	24
	                 */
	25
	 
	26
	                public static Workbook wrkbook = null;
	27
	                /**
	28
	                 * Store the column data
	29
	                 */
	30
	 
	31
	                public static Hashtable<String, Integer> dict = new Hashtable<String, Integer>();
	32
	                /**
	33
	                 * Create a Constructor
	34
	                 *
	35
	                 * @param ExcelSheetPath
	36
	                 * @throws BiffException
	37
	                 * @throws WeblivException
	38
	                 */
	39
	 
	40
	                public ExcelReader(String ExcelSheetPath) throws IOException, BiffException {
	41
	 
	42
	                            // Initialize
	43
	                                try {
	44
	                                               wrkbook = Workbook.getWorkbook(new File(ExcelSheetPath));
	45
	                                               wrksheet = wrkbook.getSheet("Sheet1");
	46
	                                } catch (IOException e) {
	47
	                                                throw new IOException();
	48
	                                }
	49
	                }
	50
	                /**
	51
	                 * Returns the Number of Rows
	52
	                 *
	53
	                 * @return Rows
	54
	                 */
	55
	 
	56
	                public static int RowCount() {
	57
	                                return wrksheet.getRows();
	58
	                }
	59
	                /**
	60
	                 * Returns the Cell value by taking row and Column values as argument
	61
	                 *
	62
	                 * @param column
	63
	                 * @param row
	64
	                 * @return Cell contents
	65
	                 */
	66
	 
	67
	                public static String ReadCell(int column, int row) {
	68
	                                return wrksheet.getCell(column, row).getContents();
	69
	                }
	70
	                /**
	71
	                * Create Column Dictionary to hold all the Column Names
	72
	                 */
	73
	                public static void ColumnDictionary() {
	74
	                                // Iterate through all the columns in the Excel sheet and store the
	75
	                                // value in Hashtable
	76
	                                for (int col = 0; col < wrksheet.getColumns(); col++) {
	77
	                                                dict.put(ReadCell(col, 0), col);
	78
	                                }
	79
	                }
	80
	                /**
	81
	                 * Read Column Names
	82
	                 *
	83
	                 * @param colName
	84
	                 * @return value
	85
	                 */
	86
	 
	87
	                public static int GetCell(String colName) {
	88
	                                try {
	89
	                                                int value;
	90
	                                                value = ((Integer) dict.get(colName)).intValue();
	91
	                                                return value;
	92
	                                } catch (NullPointerException e) {
	93
	                                                return (0);
	94
	                                }
	95
	                }
	96
	}

}
